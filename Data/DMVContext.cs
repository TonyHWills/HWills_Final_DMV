// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using HWills_Final_DMV.Models;

namespace HWills_Final_DMV.Data
{
    public partial class DMVContext : DbContext
    {
        public DMVContext()
        {
        }

        public DMVContext(DbContextOptions<DMVContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Car> Cars { get; set; }
        public virtual DbSet<Infract> Infracts { get; set; }
        public virtual DbSet<InfractLink> InfractLinks { get; set; }
        public virtual DbSet<Operator> Operators { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Car>(entity =>
            {
                entity.ToTable("Car");

                entity.Property(e => e.CarId)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.CarMake)
                    .IsRequired()
                    .HasMaxLength(155)
                    .IsUnicode(false);

                entity.Property(e => e.CarModel)
                    .IsRequired()
                    .HasMaxLength(155)
                    .IsUnicode(false);

                entity.Property(e => e.CarPlateNum)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorId)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.HasOne(d => d.Operator)
                    .WithMany(p => p.Cars)
                    .HasForeignKey(d => d.OperatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Car_Operator");
            });

            modelBuilder.Entity<Infract>(entity =>
            {
                entity.ToTable("Infract");

                entity.Property(e => e.InfractId)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.InfractType)
                    .IsRequired()
                    .HasMaxLength(155)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InfractLink>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.OperatorId, e.InfractId, e.CarId });

                entity.ToTable("InfractLink");

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorId)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.InfractId)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.CarId)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.HasOne(d => d.Car)
                    .WithMany(p => p.InfractLinks)
                    .HasForeignKey(d => d.CarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InfractLink_Car");

                entity.HasOne(d => d.Infract)
                    .WithMany(p => p.InfractLinks)
                    .HasForeignKey(d => d.InfractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InfractLink_Infract");

                entity.HasOne(d => d.Operator)
                    .WithMany(p => p.InfractLinks)
                    .HasForeignKey(d => d.OperatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InfractLink_Operator");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.InfractLinks)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InfractLink_User");
            });

            modelBuilder.Entity<Operator>(entity =>
            {
                entity.ToTable("Operator");

                entity.Property(e => e.OperatorId)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorFirstName)
                    .IsRequired()
                    .HasMaxLength(155)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorLastName)
                    .IsRequired()
                    .HasMaxLength(155)
                    .IsUnicode(false);

                entity.Property(e => e.OperatorSocial)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.UserEmployer)
                    .IsRequired()
                    .HasMaxLength(155)
                    .IsUnicode(false);

                entity.Property(e => e.UserFirstName)
                    .IsRequired()
                    .HasMaxLength(155)
                    .IsUnicode(false);

                entity.Property(e => e.UserLastName)
                    .IsRequired()
                    .HasMaxLength(155)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(155)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .IsRequired()
                    .HasMaxLength(155)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}